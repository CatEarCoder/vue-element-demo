<template>
    <section>
        <!--工具条-->
        <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
            <el-form :inline="true" :model="filters">
                <el-form-item>
                    <el-input v-model="filters.id" placeholder="预算"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-input v-model="filters.days" placeholder="游玩天数"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-input v-model="filters.godate" placeholder="预计出发日期"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-input v-model="filters.goplace" placeholder="出发地"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-input v-model="filters.arriveplace" placeholder="目的地"></el-input>
                </el-form-item>
                <el-form-item label="出游类型">
                    <el-select v-model="formInline.region" placeholder="请选择">
                        <el-option label="单程" value="single"></el-option>
                        <el-option label="多程" value="multipass"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" v-on:click="getUsers">查询</el-button>
                </el-form-item>
            </el-form>
        </el-col>
        <el-table>

        </el-table>
        <!--列表-->
        <el-table :data="users" highlight-current-row v-loading="listLoading" @selection-change="selsChange"
                  style="width: 100%;">
            <el-table-column type="selection" width="55">
            </el-table-column>
            <el-table-column prop="id" label="订单号" width="180" sortable>
            </el-table-column>
            <el-table-column prop="source" label="来源" width="120" sortable>
            </el-table-column>
            <el-table-column prop="roomType" label="房间类型" width="120" sortable>
            </el-table-column>
            <el-table-column prop="roomNumber" label="房间数量" width="120" sortable>
            </el-table-column>
            <el-table-column prop="number" label="入住人数" width="120" sortable>
            </el-table-column>
            <el-table-column prop="price" label="金额" width="120" sortable>
            </el-table-column>
            <el-table-column prop="payWay" label="支付方式" width="120" sortable>
            </el-table-column>
            <el-table-column prop="checkInDay" label="预订入住日期" min-width="160" sortable>
            </el-table-column>
            <el-table-column prop="checkOutDay" label="预计离店日期" min-width="160" sortable>
            </el-table-column>
            <el-table-column prop="operator" label="下单人" width="120" sortable>
            </el-table-column>
            <el-table-column prop="operationTime" label="下单时间" min-width="170" sortable>
            </el-table-column>
            <el-table-column prop="signInDay" label="签到时间" width="170" sortable>
            </el-table-column>
            <el-table-column prop="signOutDay" label="退房时间" width="170" sortable>
            </el-table-column>

            <el-table-column prop="status" label="状态" min-width="120" sortable>
                <template slot-scope="scope">
                    <span>{{ scope.row.status==0?'已预约':scope.row.status==1?'已接单':scope.row.status==2?'使用中':scope.row.status==3?'已完结':scope.row.status==4?'已取消':'已锁定' }}</span>
                </template>
            </el-table-column>
            <el-table-column label="操作" min-width="260">
                <template slot-scope="scope">
                    <el-button size="small" @click="handleEdit(1, scope.row.id, scope.row.status)"
                               :disabled="scope.row.status!=0">接单
                    </el-button>
                    <el-button type="primary" size="small" @click="handleEdit(2, scope.row.id, scope.row.status)">
                        checkIn
                    </el-button>
                    <el-button type="primary" size="small" @click="handleEdit(3, scope.row.id, scope.row.status)">
                        checkOut
                    </el-button>
                </template>
            </el-table-column>
        </el-table>

        <!--工具条-->
        <el-col :span="24" class="toolbar">
            <el-button type="danger" @click="batchRemove" :disabled="this.sels.length===0">批量取消</el-button>
            <el-pagination layout="prev, pager, next" @current-change="handleCurrentChange" :page-size="20"
                           :total="total" style="float:right;">
            </el-pagination>
        </el-col>
    </section>
</template>

<script>
    import util from '../../common/js/util'
    //import NProgress from 'nprogress'
    import {getRoomList, removeUser, batchRemoveUser, editUser, addUser, funDo} from '../../api/api';

    export default {
        data() {
            return {
                filters: {
                    id: '',
                    days: '',
                    godate: '',
                    goplace: '',
                    arriveplace: ''
                },
                formInline: {
                    region: ''
                },
                users: [],
                total: 1,
                page: 1,
                listLoading: false,
                sels: [],//列表选中列
                editFormVisible: false,//编辑界面是否显示
                editLoading: false,
                editFormRules: {
                    name: [
                        {required: true, message: '请输入姓名', trigger: 'blur'}
                    ]
                },
                //编辑界面数据
                editForm: {
                    id: 0,
                    name: '',
                    sex: -1,
                    age: 0,
                    birth: '',
                    addr: ''
                },

                addFormVisible: false,//新增界面是否显示
                addLoading: false,
                addFormRules: {
                    name: [
                        {required: true, message: '请输入姓名', trigger: 'blur'}
                    ]
                },
                //新增界面数据
                addForm: {
                    name: '',
                    sex: -1,
                    age: 0,
                    birth: '',
                    addr: ''
                }

            }
        },
        methods: {
            //性别显示转换
            formatSex: function (row, column) {
                return row.sex == 1 ? '男' : row.sex == 0 ? '女' : '未知';
            },
            handleCurrentChange(val) {
                this.page = val;
                this.getUsers();
            },
            //获取用户列表
            getUsers() {
                let para = {
                    id: this.filters.id
                };
                getRoomList(para).then((res) => {
                    this.users = res.data.list;
                });
            },
            //删除
            /*handleDel: function (index, row) {
                this.$confirm('确认删除该记录吗?', '提示', {
                    type: 'warning'
                }).then(() => {
                    this.listLoading = true;
                    //NProgress.start();
                    let para = {id: row.id};
                    removeUser(para).then((res) => {
                        this.listLoading = false;
                        //NProgress.done();
                        this.$message({
                            message: '删除成功',
                            type: 'success'
                        });
                        this.getUsers();
                    });
                }).catch(() => {

                });
            },*/
            //操作
            handleEdit: function (type, id, status) {
                let _this = this
                let param = {
                    funType: type,
                    id: id,
                    type: '2'
                };
                if (type == 2) {
                    if (status == 1) {
                        funDo(param).then(function (res) {
                            if (res.data.statusCode == 200) {
                                _this.$alert(res.data.message, '提示', {
                                    confirmButtonText: '确定',
                                    callback: action => {
                                        _this.getUsers();
                                    }
                                });
                            }
                        })
                    }
                    else {
                        let dec = status == 0 ? '已预约' : status == 1 ? '已接单' : status == 2 ? '使用中' : status == 3 ? '已完结' : status == 4 ? '已取消' : '已锁定'
                        _this.$alert("订单状态为‘" + dec + "’不可checkIn", '提示', {
                            confirmButtonText: "确定",
                        });
                    }
                } else if (type == 3) {
                    if (status == 2) {
                        funDo(param).then(function (res) {
                            if (res.data.statusCode == 200) {
                                _this.$alert(res.data.message, '提示', {
                                    confirmButtonText: '确定',
                                    callback: action => {
                                        _this.getUsers();
                                    }
                                });
                            }
                        })
                    }
                    else {
                        let dec = status == 0 ? '已预约' : status == 1 ? '已接单' : status == 2 ? '使用中' : status == 3 ? '已完结' : status == 4 ? '已取消' : '已锁定'
                        _this.$alert("订单状态为‘" + dec + "’不可checkIn", '提示', {
                            confirmButtonText: "确定",
                        });
                    }
                } else {
                    funDo(param).then(function (res) {
                        if (res.data.statusCode == 200) {
                            _this.$alert(res.data.message, '提示', {
                                confirmButtonText: '确定',
                                callback: action => {
                                    _this.getUsers();
                                }
                            });
                        }
                    })
                }


            },
            //显示新增界面
            handleAdd: function () {
                this.addFormVisible = true;
                this.addForm = {
                    name: '',
                    sex: -1,
                    age: 0,
                    birth: '',
                    addr: ''
                };
            },
            //编辑
            editSubmit: function () {
                this.$refs.editForm.validate((valid) => {
                    if (valid) {
                        this.$confirm('确认提交吗？', '提示', {}).then(() => {
                            this.editLoading = true;
                            //NProgress.start();
                            let para = Object.assign({}, this.editForm);
                            para.birth = (!para.birth || para.birth == '') ? '' : util.formatDate.format(new Date(para.birth), 'yyyy-MM-dd');
                            editUser(para).then((res) => {
                                this.editLoading = false;
                                //NProgress.done();
                                this.$message({
                                    message: '提交成功',
                                    type: 'success'
                                });
                                this.$refs['editForm'].resetFields();
                                this.editFormVisible = false;
                                this.getUsers();
                            });
                        });
                    }
                });
            },
            //新增
            addSubmit: function () {
                this.$refs.addForm.validate((valid) => {
                    if (valid) {
                        this.$confirm('确认提交吗？', '提示', {}).then(() => {
                            this.addLoading = true;
                            //NProgress.start();
                            let para = Object.assign({}, this.addForm);
                            para.birth = (!para.birth || para.birth == '') ? '' : util.formatDate.format(new Date(para.birth), 'yyyy-MM-dd');
                            addUser(para).then((res) => {
                                this.addLoading = false;
                                //NProgress.done();
                                this.$message({
                                    message: '提交成功',
                                    type: 'success'
                                });
                                this.$refs['addForm'].resetFields();
                                this.addFormVisible = false;
                                this.getUsers();
                            });
                        });
                    }
                });
            },
            selsChange: function (sels) {
                this.sels = sels;
            },
            //批量取消
            batchRemove: function () {
                let _this = this;
                let c = 0;
                let s = [];
                var ids = this.sels.map(item => item.id).toString();
                this.sels.forEach(function (sel) {
                    if (sel.status != 0) {
                        s.push(sel.status);
                        c++;
                    }
                });
                if (c > 0 && s[0] > 1) {
                    let text = s[0] == 2 ? '使用中' : s[0] == 3 ? '已完结' : s[0] == 4 ? '已取消' : '已锁定'
                    _this.$alert("订单状态为‘" + text + "’，无法取消，请重新选择", '提示', {
                        confirmButtonText: '确定',
                    });
                    return false
                }
                this.$confirm('确认取消选中订单吗？', '提示', {
                    type: 'warning'
                }).then(() => {
                    let para = {
                        id: ids,
                        funType: 4,
                        type: '2'
                    };
                    funDo(para).then((res) => {
                        if (res.data.statusCode == 200) {
                            this.$message({
                                message: '取消成功',
                                type: 'success'
                            });
                        }
                    });
                    this.getUsers();
                }).catch(() => {
                });
            }
        },
        mounted() {
            /*this.getUsers();*/
            getRoomList().then((res) => {
                this.users = res.data.list;
            });
        }
    }

</script>

<style scoped>

</style>